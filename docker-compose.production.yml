version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Next.js Application with zero-downtime rolling updates
  app:
    image: joshdunndev/farmy-fish-fry:latest
    ports:
      - "${APP_PORT:-7854}:3000"
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public

      # NextAuth
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}

      # Discord OAuth (required for authentication)
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}

      # Application settings
      - NODE_ENV=production
      - PORT=3000
      - ADMIN_SECRET=${ADMIN_SECRET}

      # Optional: Seed database on first run
      - SEED_DATABASE=${SEED_DATABASE:-false}

    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 2 # Run 2 instances for zero downtime
      update_config:
        parallelism: 1 # Update one container at a time
        delay: 15s # Wait between updates
        failure_action: rollback
        monitor: 45s # Monitor for 45s after update
        max_failure_ratio: 0.5
        order: start-first # Start new container before stopping old one
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G # Limit memory usage per container
        reservations:
          memory: 512M # Reserve minimum memory

  # Docker Cleanup Service - Automatically removes old containers, images, etc.
  cleanup:
    image: clockworksoul/docker-gc-cron:latest
    restart: unless-stopped
    environment:
      CRON: "0 3 * * *"  # Run at 3 AM daily
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 1
      GRACE_PERIOD_SECONDS: 3600  # 1 hour grace period
      DRY_RUN: 0  # Set to 1 for testing (won't actually delete)
      CLEAN_UP_VOLUMES: 1  # Also clean up unused volumes
      EXCLUDE_LABEL_KEY: "cleanup.exclude"  # Don't remove containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Only run on manager node
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: overlay
    attachable: true
