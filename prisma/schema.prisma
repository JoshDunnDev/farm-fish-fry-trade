generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  discordId     String?   @unique
  discordName   String?
  inGameName    String?
  isAdmin       Boolean   @default(false)
  notificationsEnabled Boolean @default(true)
  audioEnabled  Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  claimedOrders Order[]   @relation("Claimer")
  createdOrders Order[]   @relation("Creator")
  sessions      Session[]
  createdPricing Pricing[] @relation("PricingCreator")
  priceHistory  PriceHistory[] @relation("PriceHistoryCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Order {
  id           String      @id @default(cuid())
  itemName     String
  tier         Int
  pricePerUnit Float
  amount       Int
  orderType    OrderType   @default(BUY)
  status       OrderStatus @default(OPEN)
  createdAt    DateTime    @default(now())
  fulfilledAt  DateTime?
  updatedAt    DateTime    @updatedAt
  creatorId    String
  claimerId    String?
  claimer      User?       @relation("Claimer", fields: [claimerId], references: [id])
  creator      User        @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("orders")
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  READY_TO_TRADE
  FULFILLED
}

model Pricing {
  id          String   @id @default(cuid())
  itemName    String
  tier        Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("PricingCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([itemName, tier])
  @@map("pricing")
}

model PricingMetadata {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pricing_metadata")
}

model PriceHistory {
  id          String   @id @default(cuid())
  itemName    String
  tier        Int
  price       Float
  previousPrice Float?
  changeType  String   // 'created', 'updated', 'deleted'
  createdAt   DateTime @default(now())
  createdBy   String
  creator     User     @relation("PriceHistoryCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([itemName, tier, createdAt])
  @@map("price_history")
}
